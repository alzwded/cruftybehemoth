::CORE::
001 * [low] add audio interface
002 * [high] implement Background and Foreground, common abstract class
003 * reimplement collision detection to account for velocity (the current collision mechanism is stupid)
004 * [high] implement Entity_Exit and add mechanism to change levels -- level change will be done by the PC entity that collides with it
005 * for that matter, define a Entity_PC interface/abstract class
006 * decide on BlockBundle implementation to account for animations, location_, have it be abstract enough to allow the implementation of any DisplayAdapter
007 * add support for a scripting language (think Lua, but I might implement my own, or generate interfaces for any scripting language) so that it will not be necessary to code in c++
== Resource Management == 
030 * see doc/resourceManagement
== Garbage Collection ==
008 * Add ref count on Resource
009 * Run garbage collector after AI loop and display rendering and whatnot until frame time is close to running out (i.e. only clear some resources in the 17/34 miliseconds)
010 * adapt it so that if it ever takes too much time, make it be less aggressive (optimisation)
== Parallelisation ==
011 * store entities in something that openMP can run over
012 * I guess a lazy vector would be good, and then based on the time left in a frame start moving items to the left and maybe resize it down
013 * screen::add/removeEntity have locks
014 * D123:: add locks to have continuous logging output from one thread at a time
015 * [low] add OpenMP for AI loops (where aplicable) and rendering (where aplicable, entity buffer)
== Scripting ==
    * see doc/scriptingLanguage
016 * lexer
    * parser
    * basic instruction chaining
017 * coroutine behaviour
018 * improve coroutine behaviour to actually work like coroutines instead of one method executing completely and returning a list used by the caller, they should be coroutines
019 * [high] add ScriptedEntity as the base class for Entity defined through the scripting language
020 * [high] add ScriptedScreen, idem

::BUILD::
027 * rewrite Makefiles to make incremental builds possible
028 * get rid of make, it sucks, use something more intelligent
029 * win32 build, visual studio project

::RES::
    * low priority
021 * [low] resources will be stored in compressed files and the Resource adapters will need to read their data from a stream rather than from a file
022 * [low] add some rudimentary encryption

::GEOM::
023 * reimplement collision detection to be more general (the current one is stupid)
    * account for velocity etc, should return collision point on collision

::DOC::
024 * add documentation for interfaces in the source files
    * add docomentation for why things work as they do
025 * write the README

::DEMO::
== GTK demo ==
026 * decided on cairo
    * add png renderer
    * add moving entity
    * add some pool-ball moving logic
027 * add input interface (keyboard, mouse, gamepad)
== Scripting demo ==
LTG * depends on scripting support in Core
    * TODO
== Advanced demo ==
LTG * TODO
    * should use some real graphics engine like Irrlicht

::MISC::
LTG * attach some issue-tracking system to the project to set long term goals and set up some planning
