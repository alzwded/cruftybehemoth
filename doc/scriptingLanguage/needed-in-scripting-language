Purpose:
    have an idea of what will be needed in a scripting language and
    how it should work
    NOT FINAL

keywords:
    this -- refers to the current instance
    other -- refers to some other entity nearby
    likeme -- refers to some other entity like me nearby
    others -- the other entities nearby, coroutine behaviour
    likeme -- the other entities nearby of the same type as the current
              instance, coroutine behaviour
    yield -- coroutine behaviour
    return -- single return

really need to figure out how to implement the coroutine thing...

builtins:
    distance(Entity)
    types:
        fundamental:
            void // for funcs that don't return a value // ...or padding
            int
            float
            bool
            string
        specific:
            entity
            point
            region (???) // TODO finish up the improved (and functional)
                         // region mechanism
        meta:
            range (???) // amalgamation of list, generated list,
                        // yielding iterator, et al.
            ref (???) // erm... internally, some kind of void* I guess
            path (???) // because every fucking operating system needs to
                       // have its own path separator, grrr

imaginary example:
=========================================================================
{ file: imaginary-resources/entities/example-entity }

{ comments! }
{ multiline
  comment }

{ member declaration }
fleeing : bool ;
aggressiveness : int ;
name : string ;
mugShot : "imaginary-resources/mugShots/ugly.jpeg" ; { this would be a ref }

{ imports towards(entity, maxX, maxY) , away(entity, maxX, maxY) }
include data/script-util ;

{ some comment }
func decide(): Point ;
    if(other.IsA(data/entity-pc))
        if(distance(other) < 2)
            this.fleeing = 1 ;
            return away(other, 2, 2) ;
        else
            this.fleeing = 0 ;
            return towards(other, 2, 2) ;
        fi
    fi
cnuf

func nearbyFleeing(): Entity ;
    if(likeme.fleeing)
        yield likeme ;
    fi
cnuf

func decideOnPeerPressure(): bool ;
    if(distance(likeme) < 5)
        if(likeme.decided)
            this.velocity = likeme.velocity ;
            log
                TRACE "following %d to (%f,%f)" likeme.ID(),
                    likeme.velocity.X(), likeme.velocity.Y() ;
                INFO "i'm a bit scared to do that..." ;
            gol
            return ;
        fi
    fi
cnuf

{ main() is essentially the AI loop }
func main(): void ;
    if(decideOnPeerPressure())
        return ;
    else
        log INFO "that's it, I'm going in all by myself!" ; gol
        this.velocity = decide() ;
    fi
cnuf

{ idea of how range works }
{ no idea so far how to initialize one }
{ might turn out to be internal }
func range_shit(n : int): void ;
    i : range ;
    i = 1..n ;
    log
        INFO "i = %i" i ;
    gol
cnuf

{ but while we could have }
func genRange(start : int, end : int): range ;
    i : int ;
    i = start ;
    loop(i < end)
        yield i ;
        i = i + 1 ;
    pool
cnuf

{ ...the following is a language feature }
func forRange(start : int, end : int): int ;
    i : int ;
    i = start ;
    loop(i < end)
        yield i ;
        i = i + 1 ;
    pool
cnuf
{ I say keep both, follow the perl ideology -- if it can't be done in at
  least 20 different ways, it means it's unimportant }

{ ideally the following should output *pretty logging* 1 1 2 2 3 3 }
func printStuff(): void ;
    log
        INFO "%d" this.genRange(1, 3) ;
        INFO "%d" this.forRange(1, 3) ;
    gol
cnuf

{ returns 6 }
func sum(): int ;
    sum : int ;
    sum = 0 ;
    sum = sum + forRange(1, 3) ;
    return sum ;
cnuf

{ returns 2 3 4 }
func vec(): range ;
    vector : range ;
    vector = genRange(1, 3) ; { vector is [1 2 3] }
    vector = vector + 1 ; { vector is [2 3 4] }
    return vector ;
cnuf

{ ref -- see declaration of mugShot above }
func refff(): ref ;
    if(this.aggressiveness < 10)
        return this.mugShot ;
    else
        ret : ref ;
        ref = "imaginary-resources/mugShots/REALLYUgly.jpeg" ;
        return ref ;
    fi
cnuf

{ coroutine stuff }
func asdqwe1(): void ;
    x : int ;
    x = magicFormula() ; { init ONE x to magicFormula() which hopefully
                           doesn't return a range or anything }
    if(likesX(other, x)) { begin coroutine with other }
        x = x * 2 ;
        log
            INFO "%d likes %d!" other.ID(), x ;
        gol
    fi
    log { back to single exec }
        INFO "finally, x is %d" x ;
    gol
cnuf

func asdqwe2(): void ;
    likesme : bool ;
    likesme = 1 ;
    this.velocity = magicFormula() ; { not a range }
    if(!likesMe(other)) { begin coroutine }
        likesme = 0 ;
        break ; { ??? } { let's say we can break out of it }
    fi
    if(!likesMe) { single exec }
        this.die() ;
    fi
cnuf

func asdqwe3(): void ;
    score : int ;
    score = gradeMe(likeme) ; { begin coroutine with likeme }
    log
        INFO "%d" score ; { still going because score is a single value }
    gol
cnuf
func asdqwe3bis(): void ;
    score : int ;
    score = gradeMe(likeme) ; { begin coroutine with likeme }
    log
        INFO "%d gave me %d" likeme.ID(), score ; { the SAME likeme as above }
    gol
cnuf

func asdqwe4(): int ;
    bestScore : int ;
    scores : range ;
    bestScore = 0 ;
    scores = gradeMe(likeme) ; { one line coroutine, scores aggregates
                                 all the results of gradeMe }
    if(scores > bestScore) { new coroutine with scores }
        bestScore = scores ;
    fi { ends here }
    { single exec }
    return bestScore ;
cnuf
