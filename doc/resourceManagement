TODO fix the code example thing below (it's not up to date)

== On Resource Management ==

ResourceManager is god. It tells which resource leaves and dies. It uses
its all-mighty garbage collector to kill stuff off. It does not care
who is supposed to be persistent or transient, only reference counting.

Resources are reference counted. If the RC reaches 0, the all-mighty
ResourceManager's garbage collector kills it (when it has time to do this).

But the ResourceManager can only be comunicated to via ritual. The priest
leading the ritual is Game. It leaves those who pass through life
transiently so be managed by the people. But those who need to survive
through levels of Ice and Lava have a special place in Game's temple.

Therefore, those persistent through our world shall have their reference
permanently scribbled in a special place in Game's temple, known as the
list of all persistent. But when dark times come and one is to fall out of
grace with the temple of persistency, their name will be thus erased from
the list of all persistent and have their faith be decided by the
environment, and finally be garbage collected.

== In Other Words ==

Resources are ref counted. ResourceManager has a Garbage Collector that runs
after every loop in the short time until the next frame. Resource'd data
is not handled through references or bare pointers or anything, but rather
through a variation of SmartPointer that comunicates to the Resource that
spawned it that it died. This decreases the ref count of the resource.

When the Resource's ref count reaches 0, it's at the mercy of the Garbage
Collector, unless someone saves it by spawning something from it again.

When I say Resource, I mean one instance of a certain Core::Resource.

Resource is an interface.

Resource::Sp Resource::ManagedGet(...); implementation knows what it needs
The parameters it takes should be well documented.
Resource has its own internal ref count. Whenever an Sp created with ManagedGet(...) dies, it reduces the resource's ref count. When the resource's ref count reaches 0, it adds itself to the resource manager's black list

== Details ==

// internal to Resource
struct sp {
    sp(const int _RID, const ResourceManager* god)
        : RID(_RID)
        //, rm_(god)
        , rc(0)
        , master(NULL)
        {}
    void* operator*()
        if(master) {
            return static_cast<T*>(master->Get());
        } else {
            rc = new int(1);
            master = rm_->Get(RID);
            return static_cast<T*>(master->Get());
        }
    }
    template <class T>
    T* GetAs() {
        return static_cast<T*>(me_);
    }
    operator = { rc = other.rc; master = other.master; RID = other.RID; ++*rc; }
    copy constructor { idem }
    ~sp() { if(--*rc == 0)
    {
        if(master) {
            delete rc;
            master->DecRefCount();
            master = NULL;
        }
    }}
    bool operator!()
    {
        return !rc || *rc <= 0;
    }
protected:
    int* rc;
    int RID;
    Resource* master;
    void* me_;
    //const ResourceManager* rm_;
};

public:
    typedef template<>
    sp<Entity> sp;

Resource::Get transforms into, e.g.
Resource_Level::sp Get() {
    if(!this->sp_.) {
        Resource_Level::sp ret(static_cast<Level*>(OldGet()));
    }
    return sp_;
}
